# -*- coding: utf-8 -*-
"""Python_Google

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CayPZEoeuyCyfvbWyjAOkkwdtPj9qiDi
"""

import pandas as pd

df = pd.read_csv('sample_data/california_housing_train.csv')

"""для вывода функции из 5 строк: Долгота, Широта, Средний возраст дома, Количества комнат, Количество спален, Луди которые там жимут, Количество владения, Средний доход, Средняя стоимость нашего дома"""

df.head( )

"""можем добавить еще 10 строк для просмотра : """

df.head(n = 10)

"""Можем посмотреть последние 5 элементов (через функцию)"""

df.tail( )

"""Можем посмотреть последние 2 двестраки (через функцию)"""

df.tail(n = 2)

"""для просмотря общего количества строк и столбцов """

df.shape

"""Для нахождения нуливых значений, если значение нуливое будет выводиться False"""

df.isnull()

"""Можно сакратить вывод с пустыми ячейками"""

df.isnull().sum()

"""для просмотра типа данных столбца"""

df.dtypes

"""для получения всех названий сталбцов """

df.columns

"""# **Выборка данных**

для вывода определенного столбца
"""

df['latitude']

"""для вывода нескольких столбцов"""

df[['latitude', 'population']]

"""**Задание:** Необходимо вывести столбец у которого медианный возраст здания(housing_median_age) меньше 20."""

df[df['housing_median_age'] < 20]

"""вывести столбец total_rooms, у которого медианный возраст здания(housing_median_age) меньше 20."""

df[df['housing_median_age'] < 20]['total_rooms']

"""& - выполнение одновременно всех условий.

| - выполнение хотябы одного условия.

вывести столбец total_rooms, у которого медианный возраст здания(housing_median_age) меньше 20 и больше 10
"""

df[(df['housing_median_age'] < 20) & (df['housing_median_age'] > 10)]['total_rooms']

"""вывести столбец total_rooms и еще несколько столбцов, у которого медианный возраст здания(housing_median_age) меньше 20 и больше 10"""

df[(df['housing_median_age'] < 20) & (df['housing_median_age'] > 10)][['total_rooms', 'housing_median_age']]

"""**Простая статистика**

выводим максимально число столбца
"""

print(df['population'].max())

"""вывод минимальное число столбца"""

print(df['population'].min())

"""выводим среднее значение """

print(df['population'].mean())

"""Сумируем все значения"""

print(df['population'].sum())



"""Выводим средние в каждом столбце"""

df[['population', 'total_rooms']].median()

"""что бы изучить все столбцы разом """

df.describe()

"""count - Общее кол-во не пустых строк 

mean - среднее значение в столбце

std - стандартное отклонение от среднего значения 

min - минимальное значение 

max - максимально значение 

Числа 25%, 50%, 75% - перцентили 

Перцентили - это показатель, используемый в статистике, показывающий значение, ниже которого падает определенный процент наблюдений в группе наблюдений

# Изоброжаем статистическое отношения

Scatterplot (Точечный график) Математическая диаграмма, изоброжающая значения двух переменных в виде точек на декартовой плоскости. Библиотека seadorn без труда принимает pandas DataFrame(таблицу). Чтобы изобразить отношения между двумя столбцами достаточно указать, какой столбец отобразить по оси х, а какой по оси у.
"""

import seaborn as sns

"""Изображение точек долготы по отношению к широте(показывает скапление домов)"""

sns.scatterplot(data=df, x="longitude", y="latitude")

"""Отношение, чем выше кол-во семей, тем выше кол-во людей и соответственно комнат."""

sns.scatterplot(data=df, x="households", y="population", hue="total_rooms")

"""можем менять размер"""

sns.scatterplot(data=df, x="households", y="population", hue="total_rooms", size=10)

"""Мы можем визуализировать сразу несколько отношений, используя класс **PairGrid** внутри **seaborn. PairGrid** принимает как аргумент **pandas DataFrame** и визуализирует все возмодности отношения между ними, в соответствии с выбранным типом графика."""

cols = ['population', 'median_income', 'housing_median_age', 'median_house_value']
g = sns.PairGrid(df[cols])
g.map(sns.scatterplot)

"""# Линейные графики

Хорошо подойдут, если есть временная или какая-либо инная последовательность и значения, которые могут меняться в зависимость от нее. Для генерации линейных графиков в seaborn используется relplot функцию. Она также принимает DataFrame, x, y - столбцы.
"""

sns.relplot(x="latitude", y="median_house_value", kind="line", data=df)

"""Можно видеть, что в определенных местах долготы цена за дома резко подскакивает.Попробуем визуалезировать longitude по отношениям к median_house_value и поймем в чем же дело, почем цена резко подскакивай."""

sns.relplot(x = 'longitude', y = 'median_house_value', kind = 'line', data = df)

"""Можно видеть, что в определенных местах широты цена за дома также очень высока.Используя точечный график можно визуализировать эти отношения с большей четкостью. Скорее всего резкий рост цен связан с близостью к ценному обьекту, повыщающему качество жизни, скорее всего побережью океана или реки."""

sns.scatterplot(data=df, x='latitude', y='longitude', hue = 'median_house_value')

"""# Гистограмма 

Способ представления табличных данных в графическом виде - в виде столбчатой диаграммы. По оси Х обычно указывают значение, а по оси у - встречаемость(кол-во таких значений в выборке)
"""

sns.histplot(data=df, x='median_income')

"""Можно увидить что у большинства семейный доход находится между значениями 2 и 6. И только очень небольшое количество людей обладают доходом > 10.

Изобразим гистограмму по housing_median_age.
"""

sns.histplot(data = df, x = 'housing_median_age')

"""Распределение по возрасту более равномерное. Большую часть жителей составляют люди в возрасте от 20 до 40 лет. Но и молодежи не мало. Также очень много пожилых людей > 50 лет медианный возраст. 

Давайте посмотрим медианный доход у пожилых жителей.
"""

sns.histplot(data=df[df['housing_median_age'] > 50], x='median_income')

"""Большого отличия от популяции в целом не наблюдается. Скорее всего местные жители.

Давайте разобьем возрастные группы на 3 категории те кто моложе 20 лет, от 20 до 50 и то 50, чтобы посмотреть влияет ли это на доход.
"""

df.loc[df['housing_median_age'] <= 20, 'housing_median_age']

df.loc[df['housing_median_age'] <= 20, 'age_group'] = 'Молодые'
df.loc[(df['housing_median_age'] > 20) & (df['housing_median_age'] <= 50), 'age_group'] = 'Ср. возраст'
df.loc[df['housing_median_age'] > 50, 'age_group'] = 'Пожилые'

"""Что в этом случае происходит внутри таблицы? Добавился новый столбец age_group, в котором будет указана соответствующая категория. """

df.head()

"""Молодые,Седнее, Взрослые"""

df.groupby('age_group')['median_income'].mean().plot(kind='bar')

"""Молодые оказываются самой богатой группой населения. Но отличие в доходе не значительное.

Seaborn так же позволяет нам смотреть распределение по многим параметрам. Давайте поделим группы по доходам на 2. Те у кого медианный доход выше 6 и те у кого меньше. Изобразим дополнительное измерение с помощью оттенка в виде возрастных групп и групп по доходам.
"""

df.loc[df['median_income'] > 6, 'income_group'] = 'rich'
df.loc[df['median_income'] < 6, 'income_group'] = 'everyone_else'

df.columns

df.head()

sns.histplot(data = df, x = 'median_house_value', hue = 'income_group')