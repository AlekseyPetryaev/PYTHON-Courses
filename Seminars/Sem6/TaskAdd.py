# Дополнительная задачка 
# Дано натуральное число  n>1.
# Выведите все простые множителей этого числа в порядке не убывания с учетом кратности. 
# Алгоритм должен иметь сложность 0(long).

# Вариант 1

# n = 56 


# def prostoe(n):
#     result = True
#     for i in range(2, n):
#         if n % i == 0:
#             result = False
#     return result


# def new_func(n):
#     if prostoe(n) == False:                        # Если (n) не  простое 
#         for i in range(2, n):                      # тогда мы проходим по этим всем числам 
#             if n % i == 0 and prostoe(i) == True:  # если (n) делиться на (i) безостатка  и  (i)простое
#                 print(i, end=" ")                  # выводим через пробел 
#                 new_func(n//i)                     # делим на (i)
#                 break                              # принудительно заканчиваем 
#     else:
#         print(n)


# new_func(n)


#########################################################
# Вариаант 2 (через рекурсию)

def prime_factors(n, divisor = 2):
    if n == 1:                                # если последний делитель равен 1 
        return                                # тогда возвращаем
    if n % divisor == 0:                      # если число делиться на 2 
        print(divisor, end=" ")               # тогда выводим наш делитель 
        prime_factors(n // divisor, divisor)  # передаем функции(число(n) // делитель, делитель)  
    else:                                     #  если после всех делений есть остаток 
        prime_factors(n // divisor + 1)       #  прибавляем шашему делителю + 1 и прокручиваем дальше 


prime_factors(192563784133453575468567847)  # Тут вводим число

# Ответ
# 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2